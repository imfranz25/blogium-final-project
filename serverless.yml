# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: blogium
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  profile: FrancisAdmin
  region: region, 'us-east-1'
  environment:
    BLOG_TABLE_NAME: ${self:custom.blogTableName}
    USER_TABLE_NAME: ${self:custom.userTableName}
    USER_BUCKET: ${self:custom.userBucketName}
    BLOG_BUCKET: ${self:custom.blogBucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynmodb:*
        - s3:*
        - ses:*
      Resource: '*'

plugins:
  - serverless-s3-sync
  - serverless-webpack

custom:
  blogTableName: blogs
  userTableName: users
  userBucketName: blogium-user-profile-025
  blogBucketName: blogium-blog-cover-025
  s3Sync:
    - bucketName: ${self:custom.blogBucketName}
      localDir: uploads/blogs
    - bucketName: ${self:custom.userBucketName}
      localDir: uploads/profiles
  apiKeys:
    - name: dev
      value: Stratpoint123!
      usagePlan:
        name: production-api-key
        quota:
          limit: 5000
          period: DAY
        throttle:
          burstLimit: 100
          rateLimit: 20
    - name: prod
      usagePlan:
        name: production-api-key
        quota:
          limit: 1000
          period: DAY
        throttle:
          burstLimit: 100
          rateLimit: 20

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

package:
  excludeDevDependencies: true
  individually: true

functions:
  getBlog:
    handler: lambdas/endpoints/blogs/getBlog.handler
    events:
      - http:
          path: blogs/get-blog/{blogId}
          method: GET
          cors: true
          private: true

  createBlog:
    handler: lambdas/endpoints/blogs/createBlog.handler
    events:
      - http:
          path: blogs/create-blog
          method: POST
          cors: true
          private: true

  sendEmail:
    handler: lambdas/endpoints/emails/sendEmail.handler
    events:
      - http:
          path: email/send
          method: POST
          cors: true
          private: true

  # Endpoint redirection (Proxy)
  # proxy:
  #   handler: lambdas/endpoints/proxy.handler
  #   events:
  #     - http:
  #         path: chuck-norris/{proxy+}
  #         method: ANY
  #         integration: http-proxy
  #         request:
  #           uri: http://api.icndb.com/{proxy}
  #           paramerters:
  #             path:
  #               proxy: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    ProfileUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.userBucketName}

    BlogCoverUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.blogBucketName}

    BlogiumDynamoBlog:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.blogTableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    BlogiumDynamoUser:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTablename}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    MyAssumeRole:
      Type: AWS::IAM:Role
      Properties:
        RoleName: myAssumeRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - labmda.amazonaws.com
                  - apigateway.amazonaws.com
              Action:
                - sts:AssumeRole

  Outputs:
    NewOutput:
      Description: 'Description for the output'
      Value: 'Some output value'
